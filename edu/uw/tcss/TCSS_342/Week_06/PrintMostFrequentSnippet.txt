
    /**
     * Print the most frequently occurring words in the tree,
     * along with their frequency.
     */
    public void PrintMostFrequent() {
        final List<String> lTopWords = getMostFrequent(10, this.root);

        System.out.println("Most Frequent Words in AVL Tree in ascending order:");
        lTopWords.forEach(System.out::println);
        System.out.println();
    }

    /**
     * Helper method to redirect the most frequent to the more generic method
     * @param pCount the top what words to find
     * @return the top n words as specified
     */
    public List<String> getMostFrequent(final int pCount) {
        return getMostFrequent(pCount, this.root);
    }

    /**
     * Gets the most frequent nodes as a list of strings, sorted
     * in ascending order
     *
     * @param pCount the top n words
     * @return a list of the top n words
     */
    private static List<String> getMostFrequent(final int pCount, final AvlNode pRoot) {
        final AvlNode[] lAvlNodes = new AvlNode[pCount];

        // insert the elements based on counts
        lAvlNodes[0] = pRoot;

        addNodesToArray(lAvlNodes, pRoot, Comparator.comparingInt(node -> node.elementCount));

        // convert nodes into their elements
        final List<String> lTopWords = new ArrayList<>(pCount);
        for (final AvlNode node : lAvlNodes) {
            if (node != null) lTopWords.add((String) node.element);
        }

        return List.copyOf(lTopWords);
    }

    /**
     * recursive method that adds the avl nodes into the array in ascending order.
     * @param pAvlNodes the array of nodes
     * @param pNode the node to examine
     * @param pComparator the comparison to be done
     */
    private static void addNodesToArray(final AvlNode[] pAvlNodes,
                                        final AvlNode pNode,
                                        final Comparator<AvlNode> pComparator) {
        if (pNode == null) return;

        final int lArraySize = pAvlNodes.length;

        // if the array is not full...
        if (pAvlNodes[lArraySize - 1] == null) {
            insertInNonFullArray(pAvlNodes, pNode, pComparator);
        } else { // we know the array is full
            if (pComparator.compare(pNode, pAvlNodes[0]) >= 0) { // if it's greater than the first element
                for (int i = lArraySize - 1; 0 <= i; i--) { // starting from the right (the largest)
                    final int lComparisonResult = pComparator.compare(pNode, pAvlNodes[i]);
                    if (lComparisonResult > 0) {
                        // shift everything left
                        for (int j = 0; j < i; j++) {
                            pAvlNodes[j] = pAvlNodes[j + 1];
                        }
                        pAvlNodes[i] = pNode;
                        break;
                    } else if (lComparisonResult == 0) {
                        pAvlNodes[i] = pNode;
                        break;
                    }
                }
            }
            // otherwise it the node is less than everything else in the array
        }

        addNodesToArray(pAvlNodes, pNode.left, pComparator);
        addNodesToArray(pAvlNodes, pNode.right, pComparator);
    }

    /**
     * Inserts the node into an ascending-order array as needed
     * @param pAvlNodes the array of nodes
     * @param pNode the node to insert
     * @param pComparator the comparison to use
     */
    private static void insertInNonFullArray(final AvlNode[] pAvlNodes,
                                             final AvlNode pNode,
                                             final Comparator<AvlNode> pComparator) {
        final int lArraySize = pAvlNodes.length;

        if (pComparator.compare(pNode, pAvlNodes[0]) < 0) {
            // shift elements to the right by 1 starting from the end
            for (int j = lArraySize - 1; 0 < j; j--) {
                pAvlNodes[j] = pAvlNodes[j - 1];
            }

            pAvlNodes[0] = pNode;
        } else {
            for (int i = 0; i < lArraySize; i++) {
                if (pAvlNodes[i] == null) {
                    pAvlNodes[i] = pNode;
                    break;
                } else {
                    final int lComparisonResult = pComparator.compare(pNode, pAvlNodes[i]);
                    if (lComparisonResult < 0) {
                        // shift elements to the right by 1 and insert the element
                        for (int j = lArraySize - 1; i < j; j--) {
                            pAvlNodes[j] = pAvlNodes[j - 1];
                        }
                        pAvlNodes[i] = pNode;
                        break;
                    } else if (lComparisonResult == 0) {
                        pAvlNodes[i] = pNode;
                        break;
                    }
                }

            }
        }
    }

